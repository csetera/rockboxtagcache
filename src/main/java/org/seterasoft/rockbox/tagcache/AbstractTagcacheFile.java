/*
 * Copyright (c) 2011 Craig Setera.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.seterasoft.rockbox.tagcache;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

import org.seterasoft.rockbox.tagcache.util.MultiEndianDataOutputStream;

/**
 * Abstract superclass for the Index and Tag file that make up the tagcache database.  Provides
 * some common functionality.
 * 
 * @author Craig Setera
 *
 */
public abstract class AbstractTagcacheFile {
	// This is the version that is generated by the simulator
	// as of the writing of this tool (4/10/2011 - Rockbox version 3.8.1)
	public static final int VERSION = 0x5443480E;
	
	protected boolean littleEndian;
	protected ByteArrayOutputStream bos;
	protected MultiEndianDataOutputStream dos;

	/**
	 * Construct a tag cache file with the specified endianess.
	 * 
	 * @param littleEndian
	 */
	public AbstractTagcacheFile(boolean littleEndian) {
		this.littleEndian = littleEndian;
	}

	/**
	 * Initialize the streams we are using to build our output.
	 * 
	 * @throws IOException
	 */
	protected void initializeStreams() 
		throws IOException 
	{	
		bos = new ByteArrayOutputStream();
		dos = new MultiEndianDataOutputStream(bos);
	}

	/**
	 * Write an 4-byte integer value, accounting for the endianess of 
	 * this file's host CPU.
	 * 
	 * @param tagOffset
	 * @throws IOException
	 */
	protected void writeInt(int tagOffset) 
		throws IOException 
	{
		if (littleEndian) {
			dos.writeLittleEndianInt(tagOffset);
		} else {
			dos.writeInt(tagOffset);
		}
	}
}
